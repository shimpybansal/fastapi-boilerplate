name: CI

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      # - name: Install dependencies
      #   run: |
      #     python -m venv .venv
      #     source .venv/bin/activate
      #     python -m pip install --upgrade pip
      #     pip install poetry
      #     poetry install

      - name: Create and start virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate

      - name: Install PIP
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies
        run: poetry install

      # - name: Run tests
      #   run: pytest

      - name: Code quality checks
        run: |
          flake8
          black --check src

      - name: Code formatting checks
        run: bash scripts/format.sh

#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and push Docker image
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          push: true
#          tags: your-dockerhub-username/your-repo-name:latest

      - name: Build Docker image
        run: docker build -t project1 .

      - name: Publish Docker image
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker tag fastapi-boilerplate ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-boilerplate
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-boilerplate


  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      # Pull Docker image and run container steps go here...

      - name: Run Alembic migrations
        run: alembic upgrade head

      # - name: Generate documentation
      #   run: make html
      #   working-directory: /docs

      # - name: Deploy Documentation
        # Use appropriate actions depending on your hosting service...

      # - name: Build and Deploy ðŸš€
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     build_dir: ./docs/build
